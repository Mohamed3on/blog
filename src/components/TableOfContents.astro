---
export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;
const toc = headings.filter(h => h.depth >= 2 && h.depth <= 4);
---

{
  toc.length > 0 && (
    <nav id="table-of-contents" class="table-of-contents" aria-label="Table of contents">
      <ul class="toc-list">
        {toc.map(heading => (
          <li class={`toc-item toc-level-${heading.depth}`}>
            <a href={`#${heading.slug}`} class="toc-link">
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  )
}

<style>
  .table-of-contents {
    --toc-width: 250px;
    --toc-gap: 2rem;
    position: fixed;
    top: 120px;
    left: calc(50% - 384px - var(--toc-width) - var(--toc-gap));
    width: var(--toc-width);
    max-height: calc(100vh - 140px);
    overflow-y: auto;
    font-size: 0.875rem;
    line-height: 1.6;
    z-index: 5;
  }

  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc-item {
    margin: 0;
    padding: 0;
  }

  .toc-item.toc-level-3 {
    margin-left: 1rem;
  }

  .toc-item.toc-level-4 {
    margin-left: 2rem;
  }

  .toc-link {
    display: block;
    padding: 0.375rem 0;
    color: rgb(var(--color-text-base));
    opacity: 0.6;
    text-decoration: none;
    transition: all 0.2s ease;
    border-left: 2px solid transparent;
    padding-left: 1rem;
  }

  .toc-link:hover {
    opacity: 1;
    color: rgb(var(--color-accent));
  }

  .toc-link.active {
    opacity: 1;
    color: rgb(var(--color-accent));
    border-left-color: rgb(var(--color-accent));
    font-weight: 500;
  }

  /* Hide on tablets and mobile */
  @media (max-width: 1280px) {
    .table-of-contents {
      display: none;
    }
  }

  /* Hide scrollbar while keeping scroll functionality */
  .table-of-contents {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
  }
  
  .table-of-contents::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }
</style>

<script>
  function initTableOfContents() {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('h2[id], h3[id], h4[id]');
    
    if (tocLinks.length === 0 || headings.length === 0) return;

    // Create an intersection observer to highlight active section
    const observerOptions = {
      rootMargin: '-80px 0px -70% 0px',
      threshold: 0
    };

    let activeLink: Element | null = null;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const id = entry.target.getAttribute('id');
        const tocLink = document.querySelector(`.toc-link[href="#${id}"]`);
        
        if (entry.isIntersecting) {
          // Remove active class from previous link
          if (activeLink) {
            activeLink.classList.remove('active');
          }
          // Add active class to current link
          if (tocLink) {
            tocLink.classList.add('active');
            activeLink = tocLink;
            
            // Auto-scroll TOC to keep active item in view
            const tocNav = document.getElementById('table-of-contents');
            if (tocNav && tocLink) {
              const tocLinkElement = tocLink as HTMLElement;
              const tocNavRect = tocNav.getBoundingClientRect();
              const tocLinkRect = tocLinkElement.getBoundingClientRect();
              
              // Check if the active link is outside the visible area
              if (tocLinkRect.top < tocNavRect.top || tocLinkRect.bottom > tocNavRect.bottom) {
                // Scroll the active item to the center of the TOC viewport
                const scrollTop = tocLinkElement.offsetTop - tocNav.offsetTop - (tocNav.clientHeight / 2) + (tocLinkElement.clientHeight / 2);
                tocNav.scrollTo({
                  top: scrollTop,
                  behavior: 'smooth'
                });
              }
            }
          }
        }
      });
    }, observerOptions);

    // Observe all headings
    headings.forEach(heading => {
      observer.observe(heading);
    });

    // Smooth scroll behavior for TOC links
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.slice(1);
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            const offset = 80; // Account for fixed header
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - offset;
            
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });

            // Update URL without scrolling
            history.pushState(null, '', `#${targetId}`);
          }
        }
      });
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initTableOfContents);
  // Reinitialize after astro page transitions
  document.addEventListener('astro:after-swap', initTableOfContents);
</script>